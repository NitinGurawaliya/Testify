generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String      @unique
  password      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  responses     UserResponse[]
  results       Result[]
}

model Admin {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  name         String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  tests        Test[]
}

model Test {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  scheduledAt   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  adminId       Int
  admin         Admin        @relation(fields: [adminId], references: [id], onDelete: Cascade)
  questions     Question[]
  responses     UserResponse[]
  results       Result[]
}

model Question {
  id           Int          @id @default(autoincrement())
  testId       Int
  questionText String
  questionNumber  Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  options      Option[]
  responses    UserResponse[]
}

model Option {
  id           Int          @id @default(autoincrement())
  questionId   Int
  optionNumber   Int
  optionText   String
  isCorrect    Boolean
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userResponses UserResponse[] // Added this field to establish the relation with UserResponse
}

model UserResponse {
  id           Int          @id @default(autoincrement())
  userId       Int
  testId       Int
  questionId   Int
  optionId     Int
  responseTime DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option       Option       @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model Result {
  id           Int          @id @default(autoincrement())
  userId       Int
  testId       Int
  score        Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
}
